// ##############################################################################
// # Constants are chosen to match the enums in the linux kernel
// # defined in include/linux/power_supply.h as of version 3.7
// # The one difference is for style reasons the constants are
// # all uppercase not mixed case.
#pragma once
#include "std_msgs.idl"
module sensor_msgs
{
            // Power supply status constants
        const octet POWER_SUPPLY_STATUS_UNKNOWN      = 0;
        const octet POWER_SUPPLY_STATUS_CHARGING     = 1;
        const octet POWER_SUPPLY_STATUS_DISCHARGING  = 2;
        const octet POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
        const octet POWER_SUPPLY_STATUS_FULL         = 4;

        // # Power supply health constants
        const octet POWER_SUPPLY_HEALTH_UNKNOWN                = 0;
        const octet POWER_SUPPLY_HEALTH_GOOD                   = 1;
        const octet POWER_SUPPLY_HEALTH_OVERHEAT               = 2;
        const octet POWER_SUPPLY_HEALTH_DEAD                   = 3;
        const octet POWER_SUPPLY_HEALTH_OVERVOLTAGE            = 4;
        const octet POWER_SUPPLY_HEALTH_UNSPEC_FAILURE         = 5;
        const octet POWER_SUPPLY_HEALTH_COLD                   = 6;
        const octet POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE  = 7;
        const octet POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE    = 8;

        // # Power supply technology (chemistry) constants
        const octet POWER_SUPPLY_TECHNOLOGY_UNKNOWN  = 0; // Unknown battery technology
        const octet POWER_SUPPLY_TECHNOLOGY_NIMH     = 1; // Nickel-Metal Hydride battery
        const octet POWER_SUPPLY_TECHNOLOGY_LION     = 2; // Lithium-ion battery
        const octet POWER_SUPPLY_TECHNOLOGY_LIPO     = 3; // Lithium Polymer battery
        const octet POWER_SUPPLY_TECHNOLOGY_LIFE     = 4; // Lithium Iron Phosphate battery
        const octet POWER_SUPPLY_TECHNOLOGY_NICD     = 5; // Nickel-Cadmium battery
        const octet POWER_SUPPLY_TECHNOLOGY_LIMN     = 6; // Lithium Manganese Dioxide battery
        const octet POWER_SUPPLY_TECHNOLOGY_TERNARY  = 7; // Ternary Lithium battery
        const octet POWER_SUPPLY_TECHNOLOGY_VRLA     = 8; // Valve Regulated Lead-Acid battery
        
    struct BatteryState
    {


        std_msgs::Header header;

        float voltage;          // # Voltage in Volts (Mandatory)
        float temperature;      // # Temperature in Degrees Celsius (If unmeasured NaN)
        float current;          // # Negative when discharging (A)  (If unmeasured NaN)
        float charge;           // # Current charge in Ah  (If unmeasured NaN)
        float capacity;         // # Capacity in Ah (last full capacity)  (If unmeasured NaN)
        float design_capacity;  // # Capacity in Ah (design capacity)  (If unmeasured NaN)
        float percentage;       // # Charge percentage on 0 to 1 range  (If unmeasured NaN)

        octet power_supply_status;     // # The charging status as reported. Values defined above
        octet power_supply_health;     // # The battery health metric. Values defined above
        octet power_supply_technology; // # The battery chemistry. Values defined above

        boolean present;        // # True if the battery is present

        sequence<float> cell_voltage;      // # An array of individual cell voltages for each cell in the pack
                                           // # If individual voltages unknown but number of cells known set each to NaN
        sequence<float> cell_temperature;  // # An array of individual cell temperatures for each cell in the pack
                                           // # If individual temperatures unknown but number of cells known set each to NaN

        string location;        // # The location into which the battery is inserted. (slot number or plug)
        string serial_number;   // # The best approximation of the battery serial number
    };
};