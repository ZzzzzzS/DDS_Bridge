// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file std_msgs.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__STD_MSGS_STD_MSGS_HPP
#define FAST_DDS_GENERATED__STD_MSGS_STD_MSGS_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STD_MSGS_SOURCE)
#define STD_MSGS_DllAPI __declspec( dllexport )
#else
#define STD_MSGS_DllAPI __declspec( dllimport )
#endif // STD_MSGS_SOURCE
#else
#define STD_MSGS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STD_MSGS_DllAPI
#endif // _WIN32

namespace std_msgs {

/*!
 * @brief This class represents the structure Bool defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Bool
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Bool()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Bool()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Bool that will be copied.
     */
    eProsima_user_DllExport Bool(
            const Bool& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Bool that will be copied.
     */
    eProsima_user_DllExport Bool(
            Bool&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Bool that will be copied.
     */
    eProsima_user_DllExport Bool& operator =(
            const Bool& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Bool that will be copied.
     */
    eProsima_user_DllExport Bool& operator =(
            Bool&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Bool object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Bool& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Bool object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Bool& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            bool _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport bool data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport bool& data()
    {
        return m_data;
    }



private:

    bool m_data{false};

};
/*!
 * @brief This class represents the structure Byte defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Byte
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Byte()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Byte()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Byte that will be copied.
     */
    eProsima_user_DllExport Byte(
            const Byte& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Byte that will be copied.
     */
    eProsima_user_DllExport Byte(
            Byte&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Byte that will be copied.
     */
    eProsima_user_DllExport Byte& operator =(
            const Byte& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Byte that will be copied.
     */
    eProsima_user_DllExport Byte& operator =(
            Byte&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Byte object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Byte& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Byte object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Byte& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            uint8_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport uint8_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport uint8_t& data()
    {
        return m_data;
    }



private:

    uint8_t m_data{0};

};
/*!
 * @brief This class represents the structure Char defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Char
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Char()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Char()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Char that will be copied.
     */
    eProsima_user_DllExport Char(
            const Char& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Char that will be copied.
     */
    eProsima_user_DllExport Char(
            Char&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Char that will be copied.
     */
    eProsima_user_DllExport Char& operator =(
            const Char& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Char that will be copied.
     */
    eProsima_user_DllExport Char& operator =(
            Char&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Char object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Char& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Char object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Char& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            char _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport char data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport char& data()
    {
        return m_data;
    }



private:

    char m_data{0};

};
/*!
 * @brief This class represents the structure Float32 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Float32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Float32()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Float32()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Float32 that will be copied.
     */
    eProsima_user_DllExport Float32(
            const Float32& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Float32 that will be copied.
     */
    eProsima_user_DllExport Float32(
            Float32&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Float32 that will be copied.
     */
    eProsima_user_DllExport Float32& operator =(
            const Float32& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Float32 that will be copied.
     */
    eProsima_user_DllExport Float32& operator =(
            Float32&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Float32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Float32& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Float32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Float32& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            float _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport float data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport float& data()
    {
        return m_data;
    }



private:

    float m_data{0.0};

};
/*!
 * @brief This class represents the structure Float64 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Float64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Float64()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Float64()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Float64 that will be copied.
     */
    eProsima_user_DllExport Float64(
            const Float64& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Float64 that will be copied.
     */
    eProsima_user_DllExport Float64(
            Float64&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Float64 that will be copied.
     */
    eProsima_user_DllExport Float64& operator =(
            const Float64& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Float64 that will be copied.
     */
    eProsima_user_DllExport Float64& operator =(
            Float64&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Float64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Float64& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Float64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Float64& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            double _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport double data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport double& data()
    {
        return m_data;
    }



private:

    double m_data{0.0};

};
/*!
 * @brief This class represents the structure Int8 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Int8
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8 that will be copied.
     */
    eProsima_user_DllExport Int8(
            const Int8& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8 that will be copied.
     */
    eProsima_user_DllExport Int8(
            Int8&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8 that will be copied.
     */
    eProsima_user_DllExport Int8& operator =(
            const Int8& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8 that will be copied.
     */
    eProsima_user_DllExport Int8& operator =(
            Int8&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            char _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport char data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport char& data()
    {
        return m_data;
    }



private:

    char m_data{0};

};
/*!
 * @brief This class represents the structure Int16 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Int16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int16()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int16()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int16 that will be copied.
     */
    eProsima_user_DllExport Int16(
            const Int16& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int16 that will be copied.
     */
    eProsima_user_DllExport Int16(
            Int16&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int16 that will be copied.
     */
    eProsima_user_DllExport Int16& operator =(
            const Int16& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int16 that will be copied.
     */
    eProsima_user_DllExport Int16& operator =(
            Int16&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int16& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int16& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            int16_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport int16_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport int16_t& data()
    {
        return m_data;
    }



private:

    int16_t m_data{0};

};
/*!
 * @brief This class represents the structure Int32 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Int32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int32()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int32()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int32 that will be copied.
     */
    eProsima_user_DllExport Int32(
            const Int32& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int32 that will be copied.
     */
    eProsima_user_DllExport Int32(
            Int32&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int32 that will be copied.
     */
    eProsima_user_DllExport Int32& operator =(
            const Int32& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int32 that will be copied.
     */
    eProsima_user_DllExport Int32& operator =(
            Int32&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int32& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int32& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            int32_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport int32_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport int32_t& data()
    {
        return m_data;
    }



private:

    int32_t m_data{0};

};
/*!
 * @brief This class represents the structure Int64 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Int64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int64()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int64()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int64 that will be copied.
     */
    eProsima_user_DllExport Int64(
            const Int64& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int64 that will be copied.
     */
    eProsima_user_DllExport Int64(
            Int64&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int64 that will be copied.
     */
    eProsima_user_DllExport Int64& operator =(
            const Int64& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int64 that will be copied.
     */
    eProsima_user_DllExport Int64& operator =(
            Int64&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int64& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int64& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            int64_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport int64_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport int64_t& data()
    {
        return m_data;
    }



private:

    int64_t m_data{0};

};
/*!
 * @brief This class represents the structure UInt8 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class UInt8
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UInt8()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UInt8()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UInt8 that will be copied.
     */
    eProsima_user_DllExport UInt8(
            const UInt8& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UInt8 that will be copied.
     */
    eProsima_user_DllExport UInt8(
            UInt8&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UInt8 that will be copied.
     */
    eProsima_user_DllExport UInt8& operator =(
            const UInt8& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UInt8 that will be copied.
     */
    eProsima_user_DllExport UInt8& operator =(
            UInt8&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt8 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UInt8& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt8 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UInt8& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            uint8_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport uint8_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport uint8_t& data()
    {
        return m_data;
    }



private:

    uint8_t m_data{0};

};
/*!
 * @brief This class represents the structure UInt16 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class UInt16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UInt16()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UInt16()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UInt16 that will be copied.
     */
    eProsima_user_DllExport UInt16(
            const UInt16& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UInt16 that will be copied.
     */
    eProsima_user_DllExport UInt16(
            UInt16&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UInt16 that will be copied.
     */
    eProsima_user_DllExport UInt16& operator =(
            const UInt16& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UInt16 that will be copied.
     */
    eProsima_user_DllExport UInt16& operator =(
            UInt16&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UInt16& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UInt16& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            uint16_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport uint16_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport uint16_t& data()
    {
        return m_data;
    }



private:

    uint16_t m_data{0};

};
/*!
 * @brief This class represents the structure UInt32 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class UInt32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UInt32()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UInt32()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UInt32 that will be copied.
     */
    eProsima_user_DllExport UInt32(
            const UInt32& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UInt32 that will be copied.
     */
    eProsima_user_DllExport UInt32(
            UInt32&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UInt32 that will be copied.
     */
    eProsima_user_DllExport UInt32& operator =(
            const UInt32& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UInt32 that will be copied.
     */
    eProsima_user_DllExport UInt32& operator =(
            UInt32&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UInt32& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UInt32& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            uint32_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport uint32_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport uint32_t& data()
    {
        return m_data;
    }



private:

    uint32_t m_data{0};

};
/*!
 * @brief This class represents the structure UInt64 defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class UInt64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UInt64()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UInt64()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UInt64 that will be copied.
     */
    eProsima_user_DllExport UInt64(
            const UInt64& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UInt64 that will be copied.
     */
    eProsima_user_DllExport UInt64(
            UInt64&& x) noexcept
    {
        m_data = x.m_data;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UInt64 that will be copied.
     */
    eProsima_user_DllExport UInt64& operator =(
            const UInt64& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UInt64 that will be copied.
     */
    eProsima_user_DllExport UInt64& operator =(
            UInt64&& x) noexcept
    {

        m_data = x.m_data;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UInt64& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x UInt64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UInt64& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            uint64_t _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport uint64_t data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport uint64_t& data()
    {
        return m_data;
    }



private:

    uint64_t m_data{0};

};
/*!
 * @brief This class represents the structure String defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class String
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport String()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~String()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object String that will be copied.
     */
    eProsima_user_DllExport String(
            const String& x)
    {
                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object String that will be copied.
     */
    eProsima_user_DllExport String(
            String&& x) noexcept
    {
        m_data = std::move(x.m_data);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object String that will be copied.
     */
    eProsima_user_DllExport String& operator =(
            const String& x)
    {

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object String that will be copied.
     */
    eProsima_user_DllExport String& operator =(
            String&& x) noexcept
    {

        m_data = std::move(x.m_data);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x String object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const String& x) const
    {
        return (m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x String object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const String& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::string& _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::string&& _data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::string& data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::string& data()
    {
        return m_data;
    }



private:

    std::string m_data;

};
/*!
 * @brief This class represents the structure ColorRGBA defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class ColorRGBA
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ColorRGBA()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ColorRGBA()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ColorRGBA that will be copied.
     */
    eProsima_user_DllExport ColorRGBA(
            const ColorRGBA& x)
    {
                    m_r = x.m_r;

                    m_g = x.m_g;

                    m_b = x.m_b;

                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ColorRGBA that will be copied.
     */
    eProsima_user_DllExport ColorRGBA(
            ColorRGBA&& x) noexcept
    {
        m_r = x.m_r;
        m_g = x.m_g;
        m_b = x.m_b;
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ColorRGBA that will be copied.
     */
    eProsima_user_DllExport ColorRGBA& operator =(
            const ColorRGBA& x)
    {

                    m_r = x.m_r;

                    m_g = x.m_g;

                    m_b = x.m_b;

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ColorRGBA that will be copied.
     */
    eProsima_user_DllExport ColorRGBA& operator =(
            ColorRGBA&& x) noexcept
    {

        m_r = x.m_r;
        m_g = x.m_g;
        m_b = x.m_b;
        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ColorRGBA object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ColorRGBA& x) const
    {
        return (m_r == x.m_r &&
           m_g == x.m_g &&
           m_b == x.m_b &&
           m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x ColorRGBA object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ColorRGBA& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member r
     * @param _r New value for member r
     */
    eProsima_user_DllExport void r(
            float _r)
    {
        m_r = _r;
    }

    /*!
     * @brief This function returns the value of member r
     * @return Value of member r
     */
    eProsima_user_DllExport float r() const
    {
        return m_r;
    }

    /*!
     * @brief This function returns a reference to member r
     * @return Reference to member r
     */
    eProsima_user_DllExport float& r()
    {
        return m_r;
    }


    /*!
     * @brief This function sets a value in member g
     * @param _g New value for member g
     */
    eProsima_user_DllExport void g(
            float _g)
    {
        m_g = _g;
    }

    /*!
     * @brief This function returns the value of member g
     * @return Value of member g
     */
    eProsima_user_DllExport float g() const
    {
        return m_g;
    }

    /*!
     * @brief This function returns a reference to member g
     * @return Reference to member g
     */
    eProsima_user_DllExport float& g()
    {
        return m_g;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b()
    {
        return m_b;
    }


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a()
    {
        return m_a;
    }



private:

    float m_r{0.0};
    float m_g{0.0};
    float m_b{0.0};
    float m_a{0.0};

};
/*!
 * @brief This class represents the structure Header defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Header
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Header()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Header()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            const Header& x)
    {
                    m_frame_id = x.m_frame_id;

                    m_sec = x.m_sec;

                    m_nanosec = x.m_nanosec;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            Header&& x) noexcept
    {
        m_frame_id = std::move(x.m_frame_id);
        m_sec = x.m_sec;
        m_nanosec = x.m_nanosec;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            const Header& x)
    {

                    m_frame_id = x.m_frame_id;

                    m_sec = x.m_sec;

                    m_nanosec = x.m_nanosec;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            Header&& x) noexcept
    {

        m_frame_id = std::move(x.m_frame_id);
        m_sec = x.m_sec;
        m_nanosec = x.m_nanosec;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Header& x) const
    {
        return (m_frame_id == x.m_frame_id &&
           m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec);
    }

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Header& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id)
    {
        m_frame_id = _frame_id;
    }

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id)
    {
        m_frame_id = std::move(_frame_id);
    }

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const
    {
        return m_frame_id;
    }

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id()
    {
        return m_frame_id;
    }


    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            uint32_t _sec)
    {
        m_sec = _sec;
    }

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport uint32_t sec() const
    {
        return m_sec;
    }

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport uint32_t& sec()
    {
        return m_sec;
    }


    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec)
    {
        m_nanosec = _nanosec;
    }

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const
    {
        return m_nanosec;
    }

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec()
    {
        return m_nanosec;
    }



private:

    std::string m_frame_id;
    uint32_t m_sec{0};
    uint32_t m_nanosec{0};

};
/*!
 * @brief This class represents the structure Empty defined by the user in the IDL file.
 * @ingroup std_msgs
 */
class Empty
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Empty()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Empty()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Empty that will be copied.
     */
    eProsima_user_DllExport Empty(
            const Empty& x)
    {
        static_cast<void>(x);
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Empty that will be copied.
     */
    eProsima_user_DllExport Empty(
            Empty&& x) noexcept
    {
        static_cast<void>(x);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Empty that will be copied.
     */
    eProsima_user_DllExport Empty& operator =(
            const Empty& x)
    {

        static_cast<void>(x);

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Empty that will be copied.
     */
    eProsima_user_DllExport Empty& operator =(
            Empty&& x) noexcept
    {

        static_cast<void>(x);

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Empty object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Empty& x) const
    {
        static_cast<void>(x);
        return true;
    }

    /*!
     * @brief Comparison operator.
     * @param x Empty object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Empty& x) const
    {
        return !(*this == x);
    }



private:


};

} // namespace std_msgs

#endif // _FAST_DDS_GENERATED_STD_MSGS_STD_MSGS_HPP_


