// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file std_msgsTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "std_msgsTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "std_msgs.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace std_msgs {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Bool_type_identifier(
        TypeIdentifierPair& type_ids_Bool)
{

    ReturnCode_t return_code_Bool {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Bool =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Bool", type_ids_Bool);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Bool)
    {
        StructTypeFlag struct_flags_Bool = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Bool = "std_msgs::Bool";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Bool;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Bool;
        CompleteTypeDetail detail_Bool = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Bool, ann_custom_Bool, type_name_Bool.to_string());
        CompleteStructHeader header_Bool;
        header_Bool = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Bool);
        CompleteStructMemberSeq member_seq_Bool;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Bool.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Bool);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Bool, member_data);
        }
        CompleteStructType struct_type_Bool = TypeObjectUtils::build_complete_struct_type(struct_flags_Bool, header_Bool, member_seq_Bool);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Bool, type_name_Bool.to_string(), type_ids_Bool))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Bool already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Byte_type_identifier(
        TypeIdentifierPair& type_ids_Byte)
{

    ReturnCode_t return_code_Byte {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Byte =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Byte", type_ids_Byte);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Byte)
    {
        StructTypeFlag struct_flags_Byte = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Byte = "std_msgs::Byte";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Byte;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Byte;
        CompleteTypeDetail detail_Byte = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Byte, ann_custom_Byte, type_name_Byte.to_string());
        CompleteStructHeader header_Byte;
        header_Byte = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Byte);
        CompleteStructMemberSeq member_seq_Byte;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Byte.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Byte);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Byte, member_data);
        }
        CompleteStructType struct_type_Byte = TypeObjectUtils::build_complete_struct_type(struct_flags_Byte, header_Byte, member_seq_Byte);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Byte, type_name_Byte.to_string(), type_ids_Byte))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Byte already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Char_type_identifier(
        TypeIdentifierPair& type_ids_Char)
{

    ReturnCode_t return_code_Char {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Char =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Char", type_ids_Char);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Char)
    {
        StructTypeFlag struct_flags_Char = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Char = "std_msgs::Char";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Char;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Char;
        CompleteTypeDetail detail_Char = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Char, ann_custom_Char, type_name_Char.to_string());
        CompleteStructHeader header_Char;
        header_Char = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Char);
        CompleteStructMemberSeq member_seq_Char;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Char.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Char);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Char, member_data);
        }
        CompleteStructType struct_type_Char = TypeObjectUtils::build_complete_struct_type(struct_flags_Char, header_Char, member_seq_Char);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Char, type_name_Char.to_string(), type_ids_Char))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Char already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Float32_type_identifier(
        TypeIdentifierPair& type_ids_Float32)
{

    ReturnCode_t return_code_Float32 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Float32 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Float32", type_ids_Float32);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Float32)
    {
        StructTypeFlag struct_flags_Float32 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Float32 = "std_msgs::Float32";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Float32;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Float32;
        CompleteTypeDetail detail_Float32 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Float32, ann_custom_Float32, type_name_Float32.to_string());
        CompleteStructHeader header_Float32;
        header_Float32 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Float32);
        CompleteStructMemberSeq member_seq_Float32;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Float32.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Float32);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Float32, member_data);
        }
        CompleteStructType struct_type_Float32 = TypeObjectUtils::build_complete_struct_type(struct_flags_Float32, header_Float32, member_seq_Float32);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Float32, type_name_Float32.to_string(), type_ids_Float32))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Float32 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Float64_type_identifier(
        TypeIdentifierPair& type_ids_Float64)
{

    ReturnCode_t return_code_Float64 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Float64 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Float64", type_ids_Float64);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Float64)
    {
        StructTypeFlag struct_flags_Float64 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Float64 = "std_msgs::Float64";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Float64;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Float64;
        CompleteTypeDetail detail_Float64 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Float64, ann_custom_Float64, type_name_Float64.to_string());
        CompleteStructHeader header_Float64;
        header_Float64 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Float64);
        CompleteStructMemberSeq member_seq_Float64;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Float64.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Float64);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Float64, member_data);
        }
        CompleteStructType struct_type_Float64 = TypeObjectUtils::build_complete_struct_type(struct_flags_Float64, header_Float64, member_seq_Float64);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Float64, type_name_Float64.to_string(), type_ids_Float64))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Float64 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Int8_type_identifier(
        TypeIdentifierPair& type_ids_Int8)
{

    ReturnCode_t return_code_Int8 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Int8 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Int8", type_ids_Int8);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Int8)
    {
        StructTypeFlag struct_flags_Int8 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Int8 = "std_msgs::Int8";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int8;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int8;
        CompleteTypeDetail detail_Int8 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int8, ann_custom_Int8, type_name_Int8.to_string());
        CompleteStructHeader header_Int8;
        header_Int8 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Int8);
        CompleteStructMemberSeq member_seq_Int8;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Int8.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Int8);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Int8, member_data);
        }
        CompleteStructType struct_type_Int8 = TypeObjectUtils::build_complete_struct_type(struct_flags_Int8, header_Int8, member_seq_Int8);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Int8, type_name_Int8.to_string(), type_ids_Int8))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Int8 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Int16_type_identifier(
        TypeIdentifierPair& type_ids_Int16)
{

    ReturnCode_t return_code_Int16 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Int16 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Int16", type_ids_Int16);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Int16)
    {
        StructTypeFlag struct_flags_Int16 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Int16 = "std_msgs::Int16";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int16;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int16;
        CompleteTypeDetail detail_Int16 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int16, ann_custom_Int16, type_name_Int16.to_string());
        CompleteStructHeader header_Int16;
        header_Int16 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Int16);
        CompleteStructMemberSeq member_seq_Int16;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Int16.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Int16);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Int16, member_data);
        }
        CompleteStructType struct_type_Int16 = TypeObjectUtils::build_complete_struct_type(struct_flags_Int16, header_Int16, member_seq_Int16);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Int16, type_name_Int16.to_string(), type_ids_Int16))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Int16 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Int32_type_identifier(
        TypeIdentifierPair& type_ids_Int32)
{

    ReturnCode_t return_code_Int32 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Int32 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Int32", type_ids_Int32);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Int32)
    {
        StructTypeFlag struct_flags_Int32 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Int32 = "std_msgs::Int32";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int32;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int32;
        CompleteTypeDetail detail_Int32 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int32, ann_custom_Int32, type_name_Int32.to_string());
        CompleteStructHeader header_Int32;
        header_Int32 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Int32);
        CompleteStructMemberSeq member_seq_Int32;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Int32.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Int32);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Int32, member_data);
        }
        CompleteStructType struct_type_Int32 = TypeObjectUtils::build_complete_struct_type(struct_flags_Int32, header_Int32, member_seq_Int32);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Int32, type_name_Int32.to_string(), type_ids_Int32))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Int32 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Int64_type_identifier(
        TypeIdentifierPair& type_ids_Int64)
{

    ReturnCode_t return_code_Int64 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Int64 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Int64", type_ids_Int64);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Int64)
    {
        StructTypeFlag struct_flags_Int64 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Int64 = "std_msgs::Int64";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int64;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int64;
        CompleteTypeDetail detail_Int64 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int64, ann_custom_Int64, type_name_Int64.to_string());
        CompleteStructHeader header_Int64;
        header_Int64 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Int64);
        CompleteStructMemberSeq member_seq_Int64;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_Int64.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_Int64);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Int64, member_data);
        }
        CompleteStructType struct_type_Int64 = TypeObjectUtils::build_complete_struct_type(struct_flags_Int64, header_Int64, member_seq_Int64);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Int64, type_name_Int64.to_string(), type_ids_Int64))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Int64 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_UInt8_type_identifier(
        TypeIdentifierPair& type_ids_UInt8)
{

    ReturnCode_t return_code_UInt8 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_UInt8 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::UInt8", type_ids_UInt8);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_UInt8)
    {
        StructTypeFlag struct_flags_UInt8 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_UInt8 = "std_msgs::UInt8";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UInt8;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UInt8;
        CompleteTypeDetail detail_UInt8 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UInt8, ann_custom_UInt8, type_name_UInt8.to_string());
        CompleteStructHeader header_UInt8;
        header_UInt8 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UInt8);
        CompleteStructMemberSeq member_seq_UInt8;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_UInt8.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_UInt8);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_UInt8, member_data);
        }
        CompleteStructType struct_type_UInt8 = TypeObjectUtils::build_complete_struct_type(struct_flags_UInt8, header_UInt8, member_seq_UInt8);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UInt8, type_name_UInt8.to_string(), type_ids_UInt8))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::UInt8 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_UInt16_type_identifier(
        TypeIdentifierPair& type_ids_UInt16)
{

    ReturnCode_t return_code_UInt16 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_UInt16 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::UInt16", type_ids_UInt16);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_UInt16)
    {
        StructTypeFlag struct_flags_UInt16 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_UInt16 = "std_msgs::UInt16";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UInt16;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UInt16;
        CompleteTypeDetail detail_UInt16 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UInt16, ann_custom_UInt16, type_name_UInt16.to_string());
        CompleteStructHeader header_UInt16;
        header_UInt16 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UInt16);
        CompleteStructMemberSeq member_seq_UInt16;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_UInt16.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_UInt16);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_UInt16, member_data);
        }
        CompleteStructType struct_type_UInt16 = TypeObjectUtils::build_complete_struct_type(struct_flags_UInt16, header_UInt16, member_seq_UInt16);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UInt16, type_name_UInt16.to_string(), type_ids_UInt16))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::UInt16 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_UInt32_type_identifier(
        TypeIdentifierPair& type_ids_UInt32)
{

    ReturnCode_t return_code_UInt32 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_UInt32 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::UInt32", type_ids_UInt32);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_UInt32)
    {
        StructTypeFlag struct_flags_UInt32 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_UInt32 = "std_msgs::UInt32";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UInt32;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UInt32;
        CompleteTypeDetail detail_UInt32 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UInt32, ann_custom_UInt32, type_name_UInt32.to_string());
        CompleteStructHeader header_UInt32;
        header_UInt32 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UInt32);
        CompleteStructMemberSeq member_seq_UInt32;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_UInt32.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_UInt32);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_UInt32, member_data);
        }
        CompleteStructType struct_type_UInt32 = TypeObjectUtils::build_complete_struct_type(struct_flags_UInt32, header_UInt32, member_seq_UInt32);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UInt32, type_name_UInt32.to_string(), type_ids_UInt32))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::UInt32 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_UInt64_type_identifier(
        TypeIdentifierPair& type_ids_UInt64)
{

    ReturnCode_t return_code_UInt64 {eprosima::fastdds::dds::RETCODE_OK};
    return_code_UInt64 =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::UInt64", type_ids_UInt64);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_UInt64)
    {
        StructTypeFlag struct_flags_UInt64 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_UInt64 = "std_msgs::UInt64";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UInt64;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UInt64;
        CompleteTypeDetail detail_UInt64 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UInt64, ann_custom_UInt64, type_name_UInt64.to_string());
        CompleteStructHeader header_UInt64;
        header_UInt64 = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UInt64);
        CompleteStructMemberSeq member_seq_UInt64;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "data Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_UInt64.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_UInt64);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_UInt64, member_data);
        }
        CompleteStructType struct_type_UInt64 = TypeObjectUtils::build_complete_struct_type(struct_flags_UInt64, header_UInt64, member_seq_UInt64);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UInt64, type_name_UInt64.to_string(), type_ids_UInt64))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::UInt64 already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_String_type_identifier(
        TypeIdentifierPair& type_ids_String)
{

    ReturnCode_t return_code_String {eprosima::fastdds::dds::RETCODE_OK};
    return_code_String =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::String", type_ids_String);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_String)
    {
        StructTypeFlag struct_flags_String = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_String = "std_msgs::String";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_String;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_String;
        CompleteTypeDetail detail_String = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_String, ann_custom_String, type_name_String.to_string());
        CompleteStructHeader header_String;
        header_String = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_String);
        CompleteStructMemberSeq member_seq_String;
        {
            TypeIdentifierPair type_ids_data;
            ReturnCode_t return_code_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_data)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_data))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_data = 0x00000000;
            bool common_data_ec {false};
            CommonStructMember common_data {TypeObjectUtils::build_common_struct_member(member_id_data, member_flags_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_data, common_data_ec))};
            if (!common_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_data = "data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_data;
            ann_custom_String.reset();
            CompleteMemberDetail detail_data = TypeObjectUtils::build_complete_member_detail(name_data, member_ann_builtin_data, ann_custom_String);
            CompleteStructMember member_data = TypeObjectUtils::build_complete_struct_member(common_data, detail_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_String, member_data);
        }
        CompleteStructType struct_type_String = TypeObjectUtils::build_complete_struct_type(struct_flags_String, header_String, member_seq_String);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_String, type_name_String.to_string(), type_ids_String))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::String already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ColorRGBA_type_identifier(
        TypeIdentifierPair& type_ids_ColorRGBA)
{

    ReturnCode_t return_code_ColorRGBA {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ColorRGBA =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::ColorRGBA", type_ids_ColorRGBA);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ColorRGBA)
    {
        StructTypeFlag struct_flags_ColorRGBA = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ColorRGBA = "std_msgs::ColorRGBA";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ColorRGBA;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ColorRGBA;
        CompleteTypeDetail detail_ColorRGBA = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ColorRGBA, ann_custom_ColorRGBA, type_name_ColorRGBA.to_string());
        CompleteStructHeader header_ColorRGBA;
        header_ColorRGBA = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ColorRGBA);
        CompleteStructMemberSeq member_seq_ColorRGBA;
        {
            TypeIdentifierPair type_ids_r;
            ReturnCode_t return_code_r {eprosima::fastdds::dds::RETCODE_OK};
            return_code_r =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_r);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_r)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "r Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_r = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_r = 0x00000000;
            bool common_r_ec {false};
            CommonStructMember common_r {TypeObjectUtils::build_common_struct_member(member_id_r, member_flags_r, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_r, common_r_ec))};
            if (!common_r_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure r member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_r = "r";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_r;
            ann_custom_ColorRGBA.reset();
            CompleteMemberDetail detail_r = TypeObjectUtils::build_complete_member_detail(name_r, member_ann_builtin_r, ann_custom_ColorRGBA);
            CompleteStructMember member_r = TypeObjectUtils::build_complete_struct_member(common_r, detail_r);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorRGBA, member_r);
        }
        {
            TypeIdentifierPair type_ids_g;
            ReturnCode_t return_code_g {eprosima::fastdds::dds::RETCODE_OK};
            return_code_g =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_g);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_g)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "g Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_g = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_g = 0x00000001;
            bool common_g_ec {false};
            CommonStructMember common_g {TypeObjectUtils::build_common_struct_member(member_id_g, member_flags_g, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_g, common_g_ec))};
            if (!common_g_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure g member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_g = "g";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_g;
            ann_custom_ColorRGBA.reset();
            CompleteMemberDetail detail_g = TypeObjectUtils::build_complete_member_detail(name_g, member_ann_builtin_g, ann_custom_ColorRGBA);
            CompleteStructMember member_g = TypeObjectUtils::build_complete_struct_member(common_g, detail_g);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorRGBA, member_g);
        }
        {
            TypeIdentifierPair type_ids_b;
            ReturnCode_t return_code_b {eprosima::fastdds::dds::RETCODE_OK};
            return_code_b =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_b);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_b)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_b = 0x00000002;
            bool common_b_ec {false};
            CommonStructMember common_b {TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_b, common_b_ec))};
            if (!common_b_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure b member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_b = "b";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
            ann_custom_ColorRGBA.reset();
            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_ColorRGBA);
            CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorRGBA, member_b);
        }
        {
            TypeIdentifierPair type_ids_a;
            ReturnCode_t return_code_a {eprosima::fastdds::dds::RETCODE_OK};
            return_code_a =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_a);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_a)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_a = 0x00000003;
            bool common_a_ec {false};
            CommonStructMember common_a {TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_a, common_a_ec))};
            if (!common_a_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure a member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_a = "a";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
            ann_custom_ColorRGBA.reset();
            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_ColorRGBA);
            CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
            TypeObjectUtils::add_complete_struct_member(member_seq_ColorRGBA, member_a);
        }
        CompleteStructType struct_type_ColorRGBA = TypeObjectUtils::build_complete_struct_type(struct_flags_ColorRGBA, header_ColorRGBA, member_seq_ColorRGBA);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ColorRGBA, type_name_ColorRGBA.to_string(), type_ids_ColorRGBA))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::ColorRGBA already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Header_type_identifier(
        TypeIdentifierPair& type_ids_Header)
{

    ReturnCode_t return_code_Header {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Header =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Header", type_ids_Header);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Header)
    {
        StructTypeFlag struct_flags_Header = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Header = "std_msgs::Header";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Header;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Header;
        CompleteTypeDetail detail_Header = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Header, ann_custom_Header, type_name_Header.to_string());
        CompleteStructHeader header_Header;
        header_Header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Header);
        CompleteStructMemberSeq member_seq_Header;
        {
            TypeIdentifierPair type_ids_frame_id;
            ReturnCode_t return_code_frame_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_frame_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_frame_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_frame_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_frame_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_frame_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_frame_id = 0x00000000;
            bool common_frame_id_ec {false};
            CommonStructMember common_frame_id {TypeObjectUtils::build_common_struct_member(member_id_frame_id, member_flags_frame_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_frame_id, common_frame_id_ec))};
            if (!common_frame_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure frame_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_frame_id = "frame_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_frame_id;
            ann_custom_Header.reset();
            CompleteMemberDetail detail_frame_id = TypeObjectUtils::build_complete_member_detail(name_frame_id, member_ann_builtin_frame_id, ann_custom_Header);
            CompleteStructMember member_frame_id = TypeObjectUtils::build_complete_struct_member(common_frame_id, detail_frame_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_Header, member_frame_id);
        }
        {
            TypeIdentifierPair type_ids_sec;
            ReturnCode_t return_code_sec {eprosima::fastdds::dds::RETCODE_OK};
            return_code_sec =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_sec);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_sec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "sec Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_sec = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_sec = 0x00000001;
            bool common_sec_ec {false};
            CommonStructMember common_sec {TypeObjectUtils::build_common_struct_member(member_id_sec, member_flags_sec, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_sec, common_sec_ec))};
            if (!common_sec_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure sec member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_sec = "sec";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_sec;
            ann_custom_Header.reset();
            CompleteMemberDetail detail_sec = TypeObjectUtils::build_complete_member_detail(name_sec, member_ann_builtin_sec, ann_custom_Header);
            CompleteStructMember member_sec = TypeObjectUtils::build_complete_struct_member(common_sec, detail_sec);
            TypeObjectUtils::add_complete_struct_member(member_seq_Header, member_sec);
        }
        {
            TypeIdentifierPair type_ids_nanosec;
            ReturnCode_t return_code_nanosec {eprosima::fastdds::dds::RETCODE_OK};
            return_code_nanosec =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_nanosec);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_nanosec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "nanosec Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_nanosec = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_nanosec = 0x00000002;
            bool common_nanosec_ec {false};
            CommonStructMember common_nanosec {TypeObjectUtils::build_common_struct_member(member_id_nanosec, member_flags_nanosec, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_nanosec, common_nanosec_ec))};
            if (!common_nanosec_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure nanosec member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_nanosec = "nanosec";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_nanosec;
            ann_custom_Header.reset();
            CompleteMemberDetail detail_nanosec = TypeObjectUtils::build_complete_member_detail(name_nanosec, member_ann_builtin_nanosec, ann_custom_Header);
            CompleteStructMember member_nanosec = TypeObjectUtils::build_complete_struct_member(common_nanosec, detail_nanosec);
            TypeObjectUtils::add_complete_struct_member(member_seq_Header, member_nanosec);
        }
        CompleteStructType struct_type_Header = TypeObjectUtils::build_complete_struct_type(struct_flags_Header, header_Header, member_seq_Header);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Header, type_name_Header.to_string(), type_ids_Header))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Header already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Empty_type_identifier(
        TypeIdentifierPair& type_ids_Empty)
{

    ReturnCode_t return_code_Empty {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Empty =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "std_msgs::Empty", type_ids_Empty);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Empty)
    {
        StructTypeFlag struct_flags_Empty = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Empty = "std_msgs::Empty";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Empty;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Empty;
        CompleteTypeDetail detail_Empty = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Empty, ann_custom_Empty, type_name_Empty.to_string());
        CompleteStructHeader header_Empty;
        header_Empty = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Empty);
        CompleteStructMemberSeq member_seq_Empty;
        CompleteStructType struct_type_Empty = TypeObjectUtils::build_complete_struct_type(struct_flags_Empty, header_Empty, member_seq_Empty);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Empty, type_name_Empty.to_string(), type_ids_Empty))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "std_msgs::Empty already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace std_msgs

